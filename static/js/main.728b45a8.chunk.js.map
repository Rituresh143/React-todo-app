{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","todos","setTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","useEffect","temp","localStorage","getItem","loadedTodos","JSON","parse","stringify","setItem","className","onSubmit","e","preventDefault","newTodo","id","Date","getTime","text","completed","concat","type","onChange","target","value","map","onClick","updatedTodos","filter","deleteTodo","toggleComplete","checked","editTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAgGeA,MA5Ff,WACE,MAAyBC,IAAMC,SAAS,IAAxC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAuBH,IAAMC,SAAS,IAAtC,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAqCL,IAAMC,SAAS,MAApD,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAqCP,IAAMC,SAAS,IAApD,mBAAOO,EAAP,KAAmBC,EAAnB,KA2DA,OAzDAT,IAAMU,WAAU,WACd,IAAMC,EAAOC,aAAaC,QAAQ,SAC5BC,EAAcC,KAAKC,MAAML,GAE5BG,GACDX,EAASW,KAEX,IAEFd,IAAMU,WAAU,WACd,IAAMC,EAAOI,KAAKE,UAAUf,GAC5BU,aAAaM,QAAQ,QAASP,KAC7B,CAACT,IA8CF,sBAAKiB,UAAU,MAAf,UACE,uBAAMC,SA7CV,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAU,CACdC,IAAI,IAAIC,MAAOC,UACfC,KAAMvB,EACNwB,WAAW,GAGbzB,EAAS,YAAID,GAAO2B,OAAON,IAC3BlB,EAAQ,KAmCN,UACE,uBAAOyB,KAAK,OAAOC,SAAU,SAACV,GAAD,OAAOhB,EAAQgB,EAAEW,OAAOC,QAAQA,MAAO7B,IACpE,wBAAQ0B,KAAK,SAAb,yBAED5B,EAAMgC,KAAI,SAAC9B,GAAD,OAAU,gCAElBE,IAAgBF,EAAKoB,GACtB,uBAAOM,KAAK,OACZC,SAAU,SAACV,GAAD,OAAOZ,EAAeY,EAAEW,OAAOC,QACzCA,MAAOzB,IAGL,8BAAMJ,EAAKuB,OAEb,wBAAQQ,QAAS,kBA9CvB,SAAoBX,GAClB,IAAMY,EAAe,YAAIlC,GAAOmC,QAAO,SAACjC,GAAD,OAAUA,EAAKoB,KAAOA,KAE7DrB,EAASiC,GA2CkBE,CAAWlC,EAAKoB,KAAvC,oBACA,uBAAOM,KAAK,WAAWC,SAAU,kBAzCvC,SAAwBP,GACtB,IAAMY,EAAe,YAAIlC,GAAOgC,KAAI,SAAC9B,GAInC,OAHGA,EAAKoB,KAAOA,IACbpB,EAAKwB,WAAaxB,EAAKwB,WAElBxB,KAITD,EAASiC,GAgCkCG,CAAenC,EAAKoB,KAC3DgB,QAASpC,EAAKwB,YAEbtB,IAAgBF,EAAKoB,GAAM,wBAAQW,QAAS,kBAhCnD,SAAkBX,GAChB,IAAMY,EAAe,YAAIlC,GAAOgC,KAAI,SAAC9B,GAInC,OAHGA,EAAKoB,KAAOA,IACbpB,EAAKuB,KAAOnB,GAEPJ,KAETD,EAASiC,GACT7B,EAAe,MACfE,EAAe,IAuBwCgC,CAASrC,EAAKoB,KAArC,0BAC1B,wBAAQW,QAAS,kBAAM5B,EAAeH,EAAKoB,KAA3C,yBAf2BpB,EAAKoB,WC7D3BkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.728b45a8.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\n\nfunction App() {\n  const [todos,setTodos] = React.useState([])\n  const [todo,setTodo] = React.useState(\"\")\n  const [todoEditing,setTodoEditing] = React.useState(null)\n  const [editingText,setEditingText] = React.useState(\"\")\n\n  React.useEffect(() => {\n    const temp = localStorage.getItem(\"todos\")\n    const loadedTodos = JSON.parse(temp)\n\n    if(loadedTodos){\n      setTodos(loadedTodos)\n    }\n  },[])\n\n  React.useEffect(() => {\n    const temp = JSON.stringify(todos)\n    localStorage.setItem(\"todos\", temp)\n  }, [todos])\n\n  function handleSubmit(e) {\n    e.preventDefault()\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    }\n    \n    setTodos([...todos].concat(newTodo))\n    setTodo(\"\")\n  } \n\n  function deleteTodo(id) {\n    const updatedTodos = [...todos].filter((todo) => todo.id !== id)\n\n    setTodos(updatedTodos)\n  }\n\n  function toggleComplete(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo\n\n    })\n\n    setTodos(updatedTodos)\n  }\n\n  function editTodo(id){\n    const updatedTodos = [...todos].map((todo) => {\n      if(todo.id === id){\n        todo.text = editingText\n      }\n      return todo\n    })\n    setTodos(updatedTodos)\n    setTodoEditing(null)\n    setEditingText(\"\")\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" onChange={(e) => setTodo(e.target.value)} value={todo}/>\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => <div key={todo.id}>\n        \n        {todoEditing === todo.id ? (\n        <input type=\"text\" \n        onChange={(e) => setEditingText(e.target.value)} \n        value={editingText}\n        />)\n         : \n         (<div>{todo.text}</div>)}\n        \n        <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n        <input type=\"checkbox\" onChange={() => toggleComplete(todo.id)}\n        checked={todo.completed}/>\n\n        {todoEditing === todo.id ? (<button onClick={() => editTodo(todo.id)}>Submit Edits</button>) :\n         (<button onClick={() => setTodoEditing(todo.id)}>Edit Todo</button>)}\n        \n        \n      </div>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}